<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Matt Sears</title>
  <subtitle>Personal blog of Matt Sears</subtitle>
  <id>http://mattsears.com/</id>
  <link href="http://mattsears.com/"/>
  <link href="http://mattsears.com/feed.xml" rel="self"/>
  <updated>2011-12-10T00:00:00Z</updated>
  <author>
    <name>Matt Sears</name>
  </author>
  <entry>
    <title>Minitest Quick Reference</title>
    <link rel="alternate" href="/articles/2011/12/10/minitest-quick-reference"/>
    <id>/articles/2011/12/10/minitest-quick-reference</id>
    <published>2011-12-10T00:00:00Z</published>
    <updated>2011-12-10T00:00:00Z</updated>
    <author>
      <name>Matt Sears</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;a href="https://github.com/seattlerb/minitest"&gt;MiniTest&lt;/a&gt;, as the name suggests, is a
small and fast unit testing framework. Shipped with Ruby 1.9, MiniTest supports
a complete suite of testing capabilities such as TDD, BDD, mocking, and benchmarking.&lt;/p&gt;

&lt;p&gt;This quick reference aims to demonstrate MiniTest&amp;#39;s main concepts and&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/seattlerb/minitest"&gt;MiniTest&lt;/a&gt;, as the name suggests, is a
small and fast unit testing framework. Shipped with Ruby 1.9, MiniTest supports
a complete suite of testing capabilities such as TDD, BDD, mocking, and benchmarking.&lt;/p&gt;

&lt;p&gt;This quick reference aims to demonstrate MiniTest&amp;#39;s main concepts and
provide real world examples to get you acquainted quickly. Let&amp;#39;s start with
MiniTest::Spec.&lt;/p&gt;

&lt;h3&gt;MiniTest::Spec&lt;/h3&gt;

&lt;p&gt;Provides RSpec-like matchers and contexts right out of the box.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;minitest/autorun&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Hipster&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Demonstration of MiniTest&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="vi"&gt;@hipster&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hipster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="vi"&gt;@hipster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destroy!&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tap&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;attributes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;silly hats&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;attributes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;skinny jeans&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;when asked about the font&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;should be helvetica&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="vi"&gt;@hipster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;preferred_font&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;must_equal&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;helvetica&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;when asked about mainstream&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;won&amp;#39;t be mainstream&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="vi"&gt;@hipster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainstream?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wont_equal&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Matchers (must | wont)&lt;/h4&gt;

&lt;p&gt;In most cases you can switch between &lt;code&gt;must&lt;/code&gt; for positive expectations and &lt;code&gt;wont&lt;/code&gt;
for negative expectations.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Assertion&lt;/th&gt;
&lt;th align="left"&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;must_be&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;list.size.must_be :==, 0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;must_be_close_to&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;subject.size.must_be_close_to 1,1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;must_be_empty&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;list.must_be_empty&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;must_be_instance_of&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;list.must_be_instance_of Array&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;must_be_kind_of&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;list.must_be_kind_of Enumerable&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;must_be_nil&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;list.first.must_be_nil&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;must_be_same_as&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;subject.must_be_same_as subject&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;must_be_silent&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;proc { &amp;quot;no stdout or stderr&amp;quot; }.must_be_silent&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;must_be_within_epsilon&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;subject.size.must_be_within_epsilon 1,1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;must_equal&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;subject.size.must_equal 2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;must_include&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;subject.must_include &amp;quot;skinny jeans&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;must_match&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;subject.first.must_match /silly/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;must_output&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;proc { print &amp;quot;#{subject.size}!&amp;quot; }.must_output &amp;quot;2!&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;must_respond_to&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;subject.must_respond_to :count&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;must_raise&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;proc { subject.foo }.must_raise NoMethodError&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;must_send&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;subject.must_send [subject, :values_at, 0]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;must_throw&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;proc { throw :done if subject.any? }.must_throw :done&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3&gt;MiniTest::Unit::TestCase&lt;/h3&gt;

&lt;p&gt;Provides a rich set of assertions to make your tests clean and readable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;minitest/autorun&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestHipster&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="ss"&gt;MiniTest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:Unit&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;TestCase&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;
    &lt;span class="vi"&gt;@hipster&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hipster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
    &lt;span class="vi"&gt;@list&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
    &lt;span class="vi"&gt;@subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;silly hats&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;skinny jeans&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;teardown&lt;/span&gt;
    &lt;span class="vi"&gt;@hipster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destroy!&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_for_helvetica_font&lt;/span&gt;
    &lt;span class="n"&gt;assert_equal&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;helvetica!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@hipster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;preferred_font&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_not_mainstream&lt;/span&gt;
    &lt;span class="n"&gt;refute&lt;/span&gt; &lt;span class="vi"&gt;@hipster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainstream?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Assertions (assert | refute)&lt;/h4&gt;

&lt;p&gt;Toggle between &lt;code&gt;assert&lt;/code&gt; for positive assertions and &lt;code&gt;refute&lt;/code&gt; for negative assertions.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Assertion&lt;/th&gt;
&lt;th align="left"&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;assert @subject.any?, &amp;quot;empty subjects&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_block&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_block { @subject.any? }&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_empty&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_empty @list&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_equal&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_equal 2, @subject.size&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_in_delta&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_in_delta @subject.size, 1,1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_in_epsilon&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_in_epsilon @subject.size, 1, 1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_includes&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_includes @subject, &amp;quot;skinny jeans&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_instance_of&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_instance_of Array, @list&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_kind_of&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_kind_of Enumerable, @list&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_match&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_match @subject.first, /silly/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_nil&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_nil @list.first&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_operator&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_operator @list.size, :== , 0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_output&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_output(&amp;quot;Size: 2&amp;quot;) { print &amp;quot;Size: #{@subject.size}&amp;quot;}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_raises&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_raises(NoMethodError) { @subject.foo }&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_respond_to&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_respond_to @subject, :count&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_same&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_same @subject, @subject, &amp;quot;It&amp;#39;s the same object silly&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_send&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_send [@subject, :values_at, 0]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_silent&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_silent { &amp;quot;no stdout or stderr&amp;quot; }&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_throws&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;assert_throws(:error,&amp;#39;is empty&amp;#39;) {throw :error if @subject.any?}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;MiniTest::Mock&lt;/h2&gt;

&lt;p&gt;A simple and clean mock system. There two essential methods at our disposal:
&lt;code&gt;expect&lt;/code&gt; and &lt;code&gt;verify&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;minitest/autorun&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Twipster&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# A Ruby wrapper for the Twitter API&lt;/span&gt;
    &lt;span class="vi"&gt;@twitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; #lolhipster&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Twipster&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Make every tweet a hipster tweet.&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="vi"&gt;@twitter&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;MiniTest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:Mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
    &lt;span class="vi"&gt;@twipster&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Twipster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@twitter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;should append a #lolhipster hashtag and update Twitter with our status&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Skyrim? Too mainstream.&amp;quot;&lt;/span&gt;
    &lt;span class="vi"&gt;@twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="ss"&gt;:update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; #lolhipster&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="vi"&gt;@twipster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="vi"&gt;@twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify&lt;/span&gt; &lt;span class="c1"&gt;# verifies tweet and hashtag was passed to `@twitter.update`&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Resources&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/seattlerb/minitest"&gt;MiniTest on Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.seattlerb.org/minitest"&gt;MiniTest Rdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://metaskills.net/2011/03/26/using-minitest-spec-with-rails"&gt;Using MiniTest::Spec with Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rubyinside.com/a-minitestspec-tutorial-elegant-spec-style-testing-that-comes-with-ruby-5354.html"&gt;Ruby Inside: A MiniTest::Spec Tutorial: Elegant Spec-Style Testing That Comes With Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I hope you found this quick guide valuable. Please let me know if you&amp;#39;d like
to see anything else included and feel free to ask questions or give feedback
in the comments section.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ruby Blocks as Dynamic Callbacks</title>
    <link rel="alternate" href="/articles/2011/11/27/ruby-blocks-as-dynamic-callbacks"/>
    <id>/articles/2011/11/27/ruby-blocks-as-dynamic-callbacks</id>
    <published>2011-11-27T00:00:00Z</published>
    <updated>2011-11-27T00:00:00Z</updated>
    <author>
      <name>Matt Sears</name>
    </author>
    <summary type="html">&lt;p&gt;Callbacks are a great technique for achieving simplicity and flexibility. Simply put,
a callback is a block of code passed as an argument to a method. In Ruby, code
blocks are everywhere and Ruby makes it trivial to pass a block of code to
methods. For example:&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Callbacks are a great technique for achieving simplicity and flexibility. Simply put,
a callback is a block of code passed as an argument to a method. In Ruby, code
blocks are everywhere and Ruby makes it trivial to pass a block of code to
methods. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;
  &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 25&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But what do we do when a method needs two blocks of code or more? Consider the
classic case where we want a method to execute a block of code if an action
succeeds or call different code if an action fails.&lt;/p&gt;

&lt;p&gt;In this article, I will demonstrate how we can pass multiple blocks to a method and
with some metaprogramming, we can achieve a dynamic callback mechanism with just
a few lines of code.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s add a method called &lt;code&gt;callback&lt;/code&gt; to the Proc class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Proc&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="no"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;method_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;callable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_sym&lt;/span&gt;
      &lt;span class="n"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_missing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it! The above &lt;code&gt;Proc#callback&lt;/code&gt; method simply yields an anonymous class
with methods defined to handle our callbacks. This allows for the capability of
creating and storing dynamic callbacks, which can later be looked up and
executed as needed.&lt;/p&gt;

&lt;p&gt;Notice anything unusual? We&amp;#39;re using the &lt;code&gt;===&lt;/code&gt; operand to invoke the
block. &lt;code&gt;Proc#===&lt;/code&gt; is an alias for &lt;code&gt;Proc.call&lt;/code&gt;. Anything on the right side of
&lt;code&gt;===&lt;/code&gt; acts as the proc&amp;#39;s parameter. Normally, this is to allow a proc object to
be a target of a &lt;code&gt;when&lt;/code&gt; clause in case statements, but we&amp;#39;re using it as a super
simple way of invoking our anonymous class.&lt;/p&gt;

&lt;p&gt;Let’s try it with something useful. Let’s say we’re writing something which
needs to happen in an all-or-nothing, atomic fashion. Either the whole thing
works, or none of it does.  A simple case is tweeting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;Twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="ss"&gt;:success&lt;/span&gt;
&lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
  &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="ss"&gt;:failure&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;tweet&lt;/code&gt; method accepts a message string and &amp;amp;block parameters. We call
&lt;code&gt;callback&lt;/code&gt; on the block and give it a name. Any name will work :success, :error,
:fail!, whatever. In addition, we can pass arguments to the blocks (more on that
later). Now we can provide a status if the tweet was successful or not:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Ruby methods with multiple blocks. #lolruby&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Tweet successful!&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;failure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Error: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The advantage here is that we define our own mini DSL. We don&amp;#39;t need to worry
about passing too many or unexpected blocks. We could have easily said
&lt;code&gt;where.success&lt;/code&gt; or &lt;code&gt;on.error&lt;/code&gt; or &lt;code&gt;update.fail!&lt;/code&gt;. Also note the &lt;code&gt;on.failure&lt;/code&gt;
block includes a &lt;code&gt;status&lt;/code&gt; parameter - this contains the exception message
captured in the &lt;code&gt;tweet&lt;/code&gt; method above. So if Twitter was down for whatever
reason, the &lt;code&gt;on.failure&lt;/code&gt; block would be invoked and printed &amp;#39;Error: Twitter is
down or being upgraded&amp;#39;.&lt;/p&gt;

&lt;p&gt;Bonus: In addition to wrapping code in blocks, our &lt;code&gt;Proc#callback&lt;/code&gt; method
defines boolean style methods. So we could have call the tweet method like this
if we wanted to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Ruby methods with multiple blocks. #lolruby&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Tweet successful!&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;success?&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sorry, something went wrong.&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;failure?&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Put the &lt;code&gt;Proc#callback&lt;/code&gt; method in a utility library and your code will look neat and tidy.&lt;/p&gt;

&lt;p&gt;As always, I welcome your thoughts and feedback. Let me know what you think of
the techniques shown here, or share your own favorite code block tricks.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Nyan Cat RSpec Formatter</title>
    <link rel="alternate" href="/articles/2011/11/16/nyan-cat-rspec-formatter"/>
    <id>/articles/2011/11/16/nyan-cat-rspec-formatter</id>
    <published>2011-11-16T00:00:00Z</published>
    <updated>2011-11-16T00:00:00Z</updated>
    <author>
      <name>Matt Sears</name>
    </author>
    <summary type="html">&lt;p&gt;I watch a lot of tests run in a given day. So I figured why not make it more
fun. Inspired by &lt;a href="https://github.com/seattlerb/minitest"&gt;minitest&lt;/a&gt;&amp;#39;s pride, and um
cats? I came up with a &lt;a href="http://www.youtube.com/watch?v=QH2-TGUlwu4"&gt;Nyan Cat&lt;/a&gt;
inspired RSpec formatter.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;I watch a lot of tests run in a given day. So I figured why not make it more
fun. Inspired by &lt;a href="https://github.com/seattlerb/minitest"&gt;minitest&lt;/a&gt;&amp;#39;s pride, and um
cats? I came up with a &lt;a href="http://www.youtube.com/watch?v=QH2-TGUlwu4"&gt;Nyan Cat&lt;/a&gt;
inspired RSpec formatter.&lt;/p&gt;

&lt;p&gt;Update: After last week&amp;#39;s launch, Nyan Cat received a great response from the
Ruby world. Over the weekend, I released version 0.0.2.  It includes a few bug
fixes and some really cool enhancements. Most notably, Nyan Cat now spans
multiple lines. In addition, it displays running totals of passing, pending,
and failed specs. Thanks to everyone who contributed! Checkout the new
screencast below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;------&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-|&lt;/span&gt;   &lt;span class="o"&gt;/\&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;/\&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-~|&lt;/span&gt;&lt;span class="n"&gt;__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; ^ &lt;span class="o"&gt;.^&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&amp;quot;&amp;quot;  &amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Nyan Cat&lt;/h3&gt;

&lt;p&gt;Much like &lt;a href="https://github.com/kapoq/nyan"&gt;Nyan&lt;/a&gt;, Nyan Cat simply creates a rainbow
trail of test results. It counts the number of examples as they execute and
highlights failed and pending specs. The rainbow changes colors as it runs and
if all the specs pass, Nyan Cat falls asleep.  If there are any pending or
failing specs, Nyan cat is concerned and can&amp;#39;t sleep.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a short demo of Nyan Cat in action.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
  &lt;iframe
src="http://player.vimeo.com/video/32424001?title=0&amp;amp;byline=0&amp;amp;portrait=0"
width="640" height="480" frameborder="0" webkitAllowFullScreen
mozallowfullscreen allowFullScreen&gt;&lt;/iframe&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Installing Nyan Cat is easy. Just install the gem &lt;code&gt;nyan-cat-formatter&lt;/code&gt; and simply put the options in your .rspec file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="n"&gt;NyanCatFormatter&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Checkout the code on &lt;a href="https://github.com/mattsears/nyan-cat-formatter"&gt;Github&lt;/a&gt;
and let me know how you like it.  If you run into any issues, please create an
issue on Github and I will be sure to get it fixed. Of course you can always
fork the project and send me a pull request.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Gaga, A Git-Backed Key/Value Store</title>
    <link rel="alternate" href="/articles/2011/10/12/gaga-key-value-store"/>
    <id>/articles/2011/10/12/gaga-key-value-store</id>
    <published>2011-10-12T00:00:00Z</published>
    <updated>2011-10-12T00:00:00Z</updated>
    <author>
      <name>Matt Sears</name>
    </author>
    <summary type="html">&lt;p&gt;Gaga originated from my winning entry in Codebrawl&amp;#39;s &lt;a href="http://codebrawl.com/contests/key-value-stores"&gt;Key/Value
Store&lt;/a&gt; contest. The challenge
was to write the best key/value storage backend you can think of. Since Git is
fast, reliable, and a great tool for storing source code, I was really&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Gaga originated from my winning entry in Codebrawl&amp;#39;s &lt;a href="http://codebrawl.com/contests/key-value-stores"&gt;Key/Value
Store&lt;/a&gt; contest. The challenge
was to write the best key/value storage backend you can think of. Since Git is
fast, reliable, and a great tool for storing source code, I was really
interested in making an easy way to store key/values.&lt;/p&gt;

&lt;p&gt;Built with &lt;a href="https://github.com/mojombo/grit"&gt;Grit&lt;/a&gt;, Gaga supports SET, GET, KEYS,
and DELETE operations. And since it&amp;#39;s Git, we can easily enhance it to include
other awesome Git features such as branches, diffs, reverting, etc.&lt;/p&gt;

&lt;h4&gt;Usage&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;@gaga&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Gaga&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:repo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/path/to/repo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# SET&lt;/span&gt;
&lt;span class="vi"&gt;@gaga&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lady&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gaga&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# GET&lt;/span&gt;
&lt;span class="vi"&gt;@gaga&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lady&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; &amp;quot;gaga&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# KEYS&lt;/span&gt;
&lt;span class="vi"&gt;@gaga&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;  &lt;span class="c1"&gt;#=&amp;gt; [&amp;#39;lady&amp;#39;]&lt;/span&gt;

&lt;span class="c1"&gt;# DELETE&lt;/span&gt;
&lt;span class="vi"&gt;@gaga&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lady&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; &amp;#39;gaga&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Remove all items from the store&lt;/span&gt;
&lt;span class="vi"&gt;@gaga&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That works pretty well. Now, we can harness the power of Git and enhance our data
store. For example, we can get a history log for a specific key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# LOG&lt;/span&gt;
&lt;span class="vi"&gt;@gaga&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lady&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Produces:&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;all clear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;committer&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Matt Sears&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;matt@mattsears.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;committed_date&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2011-09-05...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;set &amp;#39;lady&amp;#39; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;committer&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Matt Sears&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;matt@mattsears.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;committed_date&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2011-09-05...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;delete &amp;#39;lady&amp;#39; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;committer&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Matt Sears&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;matt@mattsears.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;committed_date&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2011-09-05...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is just a start. There&amp;#39;s still a lot things we can add.  If you are interested in more detailed information, check out the repo
on &lt;a href="https://github.com/mattsears/gaga"&gt;Github&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Print Stamps With Ruby!</title>
    <link rel="alternate" href="/articles/2011/05/15/print-stamps-with-ruby"/>
    <id>/articles/2011/05/15/print-stamps-with-ruby</id>
    <published>2011-05-15T00:00:00Z</published>
    <updated>2011-05-15T00:00:00Z</updated>
    <author>
      <name>Matt Sears</name>
    </author>
    <summary type="html">&lt;p&gt;I&amp;#39;ve just released &lt;a href="https://github.com/mattsears/stamps"&gt;Stamps&lt;/a&gt; - A Ruby gem for creating postage labels,
calculate the shipping cost of packages, standardize domestic
addresses via USPS CASS certified Address Matching Software, and track
shipments using the Stamps.com Web Services API.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;I&amp;#39;ve just released &lt;a href="https://github.com/mattsears/stamps"&gt;Stamps&lt;/a&gt; - A Ruby gem for creating postage labels,
calculate the shipping cost of packages, standardize domestic
addresses via USPS CASS certified Address Matching Software, and track
shipments using the Stamps.com Web Services API.&lt;/p&gt;

&lt;h4&gt;Quick Start&lt;/h4&gt;

&lt;p&gt;First, you will need to register for a (free) developer account at
&lt;a href="http://developer.stamps.com/developer"&gt;Stamps.com&lt;/a&gt;. Once you receive
your test credentials and integration id, just plug them into the
configuration block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="no"&gt;Stamps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integration_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;STAMPS USERNAME&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;STAMPS PASSWORD&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a simple test, we can call &lt;code&gt;Stamps.account&lt;/code&gt; to retreive
information about the account.  By default, Stamps will return all
responses as a Hash.&lt;/p&gt;

&lt;h4&gt;Create a Stamp&lt;/h4&gt;

&lt;p&gt;First, we need to standardize the shipping address that complies with the USPS address
formatting guidelines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;standardized_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Stamps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clean_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="ss"&gt;:address&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;:full_name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The White House&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:address1&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1600 Pennsylvania Avenue, NW&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:city&lt;/span&gt;      &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Washington&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:state&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:zip_code&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20500&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have a clean address we can create a new stamp.  The
&lt;code&gt;Stamps.create!&lt;/code&gt; takes the sender and receiver address along with parameters
on the rate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;stamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Stamps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="ss"&gt;:rate&lt;/span&gt;          &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;:from_zip_code&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;45440&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;:to_zip_code&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20500&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;:weight_oz&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;6.5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;:ship_date&lt;/span&gt;      &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y-%m-%d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="ss"&gt;:package_type&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;:service_type&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;US-FC&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# Flat-rate&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="ss"&gt;:to&lt;/span&gt;            &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;standardized_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:from&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;:full_name&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Littlelines&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;:address1&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;50 Chestnut Street&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;:address2&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Suite 234&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;:city&lt;/span&gt;        &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Beavervcreek&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;:state&lt;/span&gt;       &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;OH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;:zip_code&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;45440&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Hooray!&lt;/h4&gt;

&lt;p&gt;That&amp;#39;s it! Stamps will return a url of the stamp.  Print it and ship it!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;stamp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:url&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are interested in more detailed information, check out the repo
on &lt;a href="https://github.com/mattsears/stamps"&gt;Github&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Easy Multiple Account Management for Heroku</title>
    <link rel="alternate" href="/articles/2011/01/11/easy-multiple-account-management-for-heroku"/>
    <id>/articles/2011/01/11/easy-multiple-account-management-for-heroku</id>
    <published>2011-01-11T00:00:00Z</published>
    <updated>2011-01-11T00:00:00Z</updated>
    <author>
      <name>Matt Sears</name>
    </author>
    <summary type="html">&lt;p&gt;Recently, I migrated all of my personal and &lt;a href="http://littlelines.com"&gt;business&lt;/a&gt; sites
to &lt;a href="http://heroku.com"&gt;Heroku&lt;/a&gt;. Heroku, as you may know, is a fantastic
service for hosting ruby applications. Oh, and it&amp;#39;s free!&lt;/p&gt;

&lt;p&gt;Like a lot of folks, I keep work and personal items such&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Recently, I migrated all of my personal and &lt;a href="http://littlelines.com"&gt;business&lt;/a&gt; sites
to &lt;a href="http://heroku.com"&gt;Heroku&lt;/a&gt;. Heroku, as you may know, is a fantastic
service for hosting ruby applications. Oh, and it&amp;#39;s free!&lt;/p&gt;

&lt;p&gt;Like a lot of folks, I keep work and personal items such
as email, bank accounts, github, etc in separate accounts.
Heroku doesn&amp;#39;t really place nice with multiple accounts.&lt;/p&gt;

&lt;p&gt;So how to do we effectively manage multiple Heroku accounts?&lt;/p&gt;

&lt;h4&gt;Prerequitites&lt;/h4&gt;

&lt;p&gt;The following assumes you are on the Mac OS or *nix system, own
multiple Heroku accounts, and have installed the Heroku gem. I should
also be point out that you will need to create separate ssh
public keys for each account.&lt;/p&gt;

&lt;h4&gt;Custom Ruby Script&lt;/h4&gt;

&lt;p&gt;One option is we can use a script such as Keith Gaddis
&lt;a href="http://collectiveidea.com/blog/archives/2010/08/06/heroku-ing-with-multiple-personalities"&gt;describes&lt;/a&gt;
over at the Collective Idea blog. With his &lt;a href="https://gist.github.com/511789"&gt;switcher&lt;/a&gt; script, we can
switch between two accounts like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="n"&gt;switcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt; &lt;span class="n"&gt;personal&lt;/span&gt;
&lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="n"&gt;switcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This essentially swaps the credentials file (used by the Heroku gem
for authentication) for the account you want to
use. This works well enough, however this can be tedious especially if
you switch between work and personal projects frequently.&lt;/p&gt;

&lt;h4&gt;Enter Heroku Accounts Plugin&lt;/h4&gt;

&lt;p&gt;David Dollar of Heroku recently released an official Heroku
plugin called &lt;a href="https://github.com/ddollar/heroku-accounts"&gt;heroku-accounts&lt;/a&gt;. With
this plugin, we can switch Heroku accounts automatically.&lt;/p&gt;

&lt;p&gt;To get started, we first install the plugin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ddollar&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;heroku&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The installation process will download the plugin from github and save
it to the &lt;code&gt;~/.heroku/plugins&lt;/code&gt; directory. Now, we can
setup each of our Heroku accounts with &lt;code&gt;add&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and for our personal account, we can run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;personal&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;add&lt;/code&gt; command will ask you for your Heroku email address and
password for each account. The plugin will maintain
your account credentials in the &lt;code&gt;~/.heroku/accounts&lt;/code&gt; folder in your
home directory. (Passwords are not saved in plain text)&lt;/p&gt;

&lt;p&gt;To assign a project to a specific Heroku account, we run the following
command in the project root:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;personal&lt;/span&gt; # &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will assign a Heroku account to the project by adding an &amp;#39;account&amp;#39; variable
to the project&amp;#39;s git config file.&lt;/p&gt;

&lt;h4&gt;Celebrate&lt;/h4&gt;

&lt;p&gt;Hooray! Now we can switch Heroku accounts automatically. Awesome.&lt;/p&gt;
</content>
  </entry>
</feed>
