<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>NameError at /feed.xml</title>

  <script type="text/javascript">
  //<!--
  function toggle(id) {
    var pre  = document.getElementById("pre-" + id);
    var post = document.getElementById("post-" + id);
    var context = document.getElementById("context-" + id);

    if (pre.style.display == 'block') {
      pre.style.display = 'none';
      post.style.display = 'none';
      context.style.background = "none";
    } else {
      pre.style.display = 'block';
      post.style.display = 'block';
      context.style.background = "#fffed9";
    }
  }

  function toggleBacktrace(){
    var bt = document.getElementById("backtrace");
    var toggler = document.getElementById("expando");

    if (bt.className == 'condensed') {
      bt.className = 'expanded';
      toggler.innerHTML = "(condense)";
    } else {
      bt.className = 'condensed';
      toggler.innerHTML = "(expand)";
    }
  }
  //-->
  </script>

<style type="text/css" media="screen">
  *                   {margin: 0; padding: 0; border: 0; outline: 0;}
  div.clear           {clear: both;}
  body                {background: #EEEEEE; margin: 0; padding: 0;
                       font-family: 'Lucida Grande', 'Lucida Sans Unicode',
                       'Garuda';}
  code                {font-family: 'Lucida Console', monospace;
                       font-size: 12px;}
  li                  {height: 18px;}
  ul                  {list-style: none; margin: 0; padding: 0;}
  ol:hover            {cursor: pointer;}
  ol li               {white-space: pre;}
  #explanation        {font-size: 12px; color: #666666;
                       margin: 20px 0 0 100px;}
/* WRAP */
  #wrap               {width: 1000px; background: #FFFFFF; margin: 0 auto;
                       padding: 30px 50px 20px 50px;
                       border-left: 1px solid #DDDDDD;
                       border-right: 1px solid #DDDDDD;}
/* HEADER */
  #header             {margin: 0 auto 25px auto;}
  #header img         {float: left;}
  #header #summary    {float: left; margin: 12px 0 0 20px; width:660px;
                       font-family: 'Lucida Grande', 'Lucida Sans Unicode';}
  h1                  {margin: 0; font-size: 36px; color: #981919;}
  h2                  {margin: 0; font-size: 22px; color: #333333;}
  #header ul          {margin: 0; font-size: 12px; color: #666666;}
  #header ul li strong{color: #444444;}
  #header ul li       {display: inline; padding: 0 10px;}
  #header ul li.first {padding-left: 0;}
  #header ul li.last  {border: 0; padding-right: 0;}
/* BODY */
  #backtrace,
  #get,
  #post,
  #cookies,
  #rack               {width: 980px; margin: 0 auto 10px auto;}
  p#nav               {float: right; font-size: 14px;}
/* BACKTRACE */
  a#expando           {float: left; padding-left: 5px; color: #666666;
                      font-size: 14px; text-decoration: none; cursor: pointer;}
  a#expando:hover     {text-decoration: underline;}
  h3                  {float: left; width: 100px; margin-bottom: 10px;
                       color: #981919; font-size: 14px; font-weight: bold;}
  #nav a              {color: #666666; text-decoration: none; padding: 0 5px;}
  #backtrace li.frame-info {background: #f7f7f7; padding-left: 10px;
                           font-size: 12px; color: #333333;}
  #backtrace ul       {list-style-position: outside; border: 1px solid #E9E9E9;
                       border-bottom: 0;}
  #backtrace ol       {width: 920px; margin-left: 50px;
                       font: 10px 'Lucida Console', monospace; color: #666666;}
  #backtrace ol li    {border: 0; border-left: 1px solid #E9E9E9;
                       padding: 2px 0;}
  #backtrace ol code  {font-size: 10px; color: #555555; padding-left: 5px;}
  #backtrace-ul li    {border-bottom: 1px solid #E9E9E9; height: auto;
                       padding: 3px 0;}
  #backtrace-ul .code {padding: 6px 0 4px 0;}
  #backtrace.condensed .system,
  #backtrace.condensed .framework {display:none;}
/* REQUEST DATA */
  p.no-data           {padding-top: 2px; font-size: 12px; color: #666666;}
  table.req           {width: 980px; text-align: left; font-size: 12px;
                       color: #666666; padding: 0; border-spacing: 0;
                       border: 1px solid #EEEEEE; border-bottom: 0;
                       border-left: 0;
                       clear:both}
  table.req tr th     {padding: 2px 10px; font-weight: bold;
                       background: #F7F7F7; border-bottom: 1px solid #EEEEEE;
                       border-left: 1px solid #EEEEEE;}
  table.req tr td     {padding: 2px 20px 2px 10px;
                       border-bottom: 1px solid #EEEEEE;
                       border-left: 1px solid #EEEEEE;}
/* HIDE PRE/POST CODE AT START */
  .pre-context,
  .post-context       {display: none;}

  table td.code       {width:750px}
  table td.code div   {width:750px;overflow:hidden}
</style>
</head>
<body>
  <div id="wrap">
    <div id="header">
      <img src="/__sinatra__/500.png" alt="application error" height="161" width="313" />
      <div id="summary">
        <h1><strong>NameError</strong> at <strong>/feed.xml
          </strong></h1>
        <h2>undefined local variable or method `hostname&#39; for #&lt;Aerial::App:0x102302bd8&gt;</h2>
        <ul>
          <li class="first"><strong>file:</strong> <code>
            rss.haml</code></li>
          <li><strong>location:</strong> <code>__tilt_b2bd532ca3b5ca57f0c69c0ceed55bc0
            </code></li>
          <li class="last"><strong>line:
            </strong> 5</li>
        </ul>
      </div>
      <div class="clear"></div>
    </div>

    <div id="backtrace" class='condensed'>
      <h3>BACKTRACE</h3>
      <p><a href="#" id="expando"
            onclick="toggleBacktrace(); return false">(expand)</a></p>
      <p id="nav"><strong>JUMP TO:</strong>
         <a href="#get-info">GET</a>
         <a href="#post-info">POST</a>
         <a href="#cookie-info">COOKIES</a>
         <a href="#env-info">ENV</a>
      </p>
      <div class="clear"></div>

      <ul id="backtrace-ul">

      
      
          

            <li class="frame-info app">
              <code>/Users/matt/Workspace/active/mattsears.com/src/mattsears.com/views/rss.haml</code> in
                <code><strong>__tilt_b2bd532ca3b5ca57f0c69c0ceed55bc0</strong></code>
            </li>

            <li class="code app">
              
              <ol start="1"
                  class="pre-context" id="pre-1"
                  onclick="toggle(1);">
                
                <li class="pre-context-line"><code>!!! XML
</code></li>
                
                <li class="pre-context-line"><code>%rss{&quot;version&quot; =&gt; &quot;2.0&quot;}
</code></li>
                
                <li class="pre-context-line"><code>  %channel
</code></li>
                
                <li class="pre-context-line"><code>    %title= &quot;#{Aerial.config.title}&quot;
</code></li>
                
              </ol>
              

              <ol start="5" class="context" id="1"
                  onclick="toggle(1);">
                <li class="context-line" id="context-1"><code>    %link= &quot;http://#{hostname}&quot;</code></li>
              </ol>

              
              <ol start="6" class="post-context"
                  id="post-1" onclick="toggle(1);">
                
                <li class="post-context-line"><code>    %language= &quot;en-us&quot;
</code></li>
                
                <li class="post-context-line"><code>    %ttl= &quot;40&quot;
</code></li>
                
                <li class="post-context-line"><code>    %generator Aerial
</code></li>
                
                <li class="post-context-line"><code>    %description= &quot;#{Aerial.config.subtitle}&quot;
</code></li>
                
                <li class="post-context-line"><code>    %pubDate= @articles.first ? rss_date(@articles.first.published_at) : rss_date(Time.now.utc)
</code></li>
                
                <li class="post-context-line"><code>    - @articles.each do |article|
</code></li>
                
                <li class="post-context-line"><code>      %item
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/tilt.rb</code> in
                <code><strong>send</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="188"
                  class="pre-context" id="pre-2"
                  onclick="toggle(2);">
                
                <li class="pre-context-line"><code>    def evaluate(scope, locals, &amp;block)
</code></li>
                
                <li class="pre-context-line"><code>      if scope.respond_to?(:__tilt__)
</code></li>
                
                <li class="pre-context-line"><code>        method_name = compiled_method_name(locals.keys)
</code></li>
                
                <li class="pre-context-line"><code>        if scope.respond_to?(method_name)
</code></li>
                
                <li class="pre-context-line"><code>          scope.send(method_name, locals, &amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        else
</code></li>
                
                <li class="pre-context-line"><code>          compile_template_method(method_name, locals)
</code></li>
                
              </ol>
              

              <ol start="195" class="context" id="2"
                  onclick="toggle(2);">
                <li class="context-line" id="context-2"><code>          scope.send(method_name, locals, &amp;block)</code></li>
              </ol>

              
              <ol start="196" class="post-context"
                  id="post-2" onclick="toggle(2);">
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      else
</code></li>
                
                <li class="post-context-line"><code>        evaluate_source(scope, locals, &amp;block)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # Generates all template source by combining the preamble, template, and
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/tilt.rb</code> in
                <code><strong>evaluate</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="188"
                  class="pre-context" id="pre-3"
                  onclick="toggle(3);">
                
                <li class="pre-context-line"><code>    def evaluate(scope, locals, &amp;block)
</code></li>
                
                <li class="pre-context-line"><code>      if scope.respond_to?(:__tilt__)
</code></li>
                
                <li class="pre-context-line"><code>        method_name = compiled_method_name(locals.keys)
</code></li>
                
                <li class="pre-context-line"><code>        if scope.respond_to?(method_name)
</code></li>
                
                <li class="pre-context-line"><code>          scope.send(method_name, locals, &amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        else
</code></li>
                
                <li class="pre-context-line"><code>          compile_template_method(method_name, locals)
</code></li>
                
              </ol>
              

              <ol start="195" class="context" id="3"
                  onclick="toggle(3);">
                <li class="context-line" id="context-3"><code>          scope.send(method_name, locals, &amp;block)</code></li>
              </ol>

              
              <ol start="196" class="post-context"
                  id="post-3" onclick="toggle(3);">
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      else
</code></li>
                
                <li class="post-context-line"><code>        evaluate_source(scope, locals, &amp;block)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # Generates all template source by combining the preamble, template, and
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/tilt.rb</code> in
                <code><strong>evaluate</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="442"
                  class="pre-context" id="pre-4"
                  onclick="toggle(4);">
                
                <li class="pre-context-line"><code>    def prepare
</code></li>
                
                <li class="pre-context-line"><code>      options = @options.merge(:filename =&gt; eval_file, :line =&gt; line)
</code></li>
                
                <li class="pre-context-line"><code>      @engine = ::Haml::Engine.new(data, options)
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def evaluate(scope, locals, &amp;block)
</code></li>
                
                <li class="pre-context-line"><code>      if @engine.respond_to?(:precompiled_method_return_value, true)
</code></li>
                
              </ol>
              

              <ol start="449" class="context" id="4"
                  onclick="toggle(4);">
                <li class="context-line" id="context-4"><code>        super</code></li>
              </ol>

              
              <ol start="450" class="post-context"
                  id="post-4" onclick="toggle(4);">
                
                <li class="post-context-line"><code>      else
</code></li>
                
                <li class="post-context-line"><code>        @engine.render(scope, locals, &amp;block)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # Precompiled Haml source. Taken from the precompiled_with_ambles
</code></li>
                
                <li class="post-context-line"><code>    # method in Haml::Precompiler:
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/tilt.rb</code> in
                <code><strong>render</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="124"
                  class="pre-context" id="pre-5"
                  onclick="toggle(5);">
                
                <li class="pre-context-line"><code>      prepare
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Render the template in the given scope with the locals specified. If a
</code></li>
                
                <li class="pre-context-line"><code>    # block is given, it is typically available within the template via
</code></li>
                
                <li class="pre-context-line"><code>    # +yield+.
</code></li>
                
                <li class="pre-context-line"><code>    def render(scope=Object.new, locals={}, &amp;block)
</code></li>
                
              </ol>
              

              <ol start="131" class="context" id="5"
                  onclick="toggle(5);">
                <li class="context-line" id="context-5"><code>      evaluate scope, locals || {}, &amp;block</code></li>
              </ol>

              
              <ol start="132" class="post-context"
                  id="post-5" onclick="toggle(5);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # The basename of the template file.
</code></li>
                
                <li class="post-context-line"><code>    def basename(suffix=&#39;&#39;)
</code></li>
                
                <li class="post-context-line"><code>      File.basename(file, suffix) if file
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>render</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="336"
                  class="pre-context" id="pre-6"
                  onclick="toggle(6);">
                
                <li class="pre-context-line"><code>      locals = options.delete(:locals) || locals || {}
</code></li>
                
                <li class="pre-context-line"><code>      views = options.delete(:views) || settings.views || &quot;./views&quot;
</code></li>
                
                <li class="pre-context-line"><code>      layout = options.delete(:layout)
</code></li>
                
                <li class="pre-context-line"><code>      layout = :layout if layout.nil? || layout == true
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # compile and render template
</code></li>
                
                <li class="pre-context-line"><code>      template = compile_template(engine, data, options, views)
</code></li>
                
              </ol>
              

              <ol start="343" class="context" id="6"
                  onclick="toggle(6);">
                <li class="context-line" id="context-6"><code>      output = template.render(self, locals, &amp;block)</code></li>
              </ol>

              
              <ol start="344" class="post-context"
                  id="post-6" onclick="toggle(6);">
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # render layout
</code></li>
                
                <li class="post-context-line"><code>      if layout
</code></li>
                
                <li class="post-context-line"><code>        begin
</code></li>
                
                <li class="post-context-line"><code>          options = options.merge(:views =&gt; views, :layout =&gt; false)
</code></li>
                
                <li class="post-context-line"><code>          output = render(engine, layout, options, locals) { output }
</code></li>
                
                <li class="post-context-line"><code>        rescue Errno::ENOENT
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>haml</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="304"
                  class="pre-context" id="pre-7"
                  onclick="toggle(7);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def erubis(template, options={}, locals={})
</code></li>
                
                <li class="pre-context-line"><code>      options[:outvar] = &#39;@_out_buf&#39;
</code></li>
                
                <li class="pre-context-line"><code>      render :erubis, template, options, locals
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def haml(template, options={}, locals={})
</code></li>
                
              </ol>
              

              <ol start="311" class="context" id="7"
                  onclick="toggle(7);">
                <li class="context-line" id="context-7"><code>      render :haml, template, options, locals</code></li>
              </ol>

              
              <ol start="312" class="post-context"
                  id="post-7" onclick="toggle(7);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def sass(template, options={}, locals={})
</code></li>
                
                <li class="post-context-line"><code>      options[:layout] = false
</code></li>
                
                <li class="post-context-line"><code>      render :sass, template, options, locals
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info app">
              <code>/Users/matt/Workspace/aerial/bin/../lib/aerial/../aerial/app.rb</code> in
                <code><strong>GET /feed*</strong></code>
            </li>

            <li class="code app">
              
              <ol start="27"
                  class="pre-context" id="pre-8"
                  onclick="toggle(8);">
                
                <li class="pre-context-line"><code>      @articles = Aerial::Article.recent(:limit =&gt; 10)
</code></li>
                
                <li class="pre-context-line"><code>      cache haml(:articles)
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    get &#39;/feed*&#39; do
</code></li>
                
                <li class="pre-context-line"><code>      content_type &#39;text/xml&#39;, :charset =&gt; &#39;utf-8&#39;
</code></li>
                
                <li class="pre-context-line"><code>      @articles = Aerial::Article.all
</code></li>
                
              </ol>
              

              <ol start="34" class="context" id="8"
                  onclick="toggle(8);">
                <li class="context-line" id="context-8"><code>      cache haml(:rss, :layout =&gt; false)</code></li>
              </ol>

              
              <ol start="35" class="post-context"
                  id="post-8" onclick="toggle(8);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # Sassy!
</code></li>
                
                <li class="post-context-line"><code>    get &#39;/style.css&#39; do
</code></li>
                
                <li class="post-context-line"><code>      content_type &#39;text/css&#39;, :charset =&gt; &#39;utf-8&#39;
</code></li>
                
                <li class="post-context-line"><code>      cache sass(:style)
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="856"
                  class="pre-context" id="pre-9"
                  onclick="toggle(9);">
                
                <li class="pre-context-line"><code>        pattern, keys = compile(path)
</code></li>
                
                <li class="pre-context-line"><code>        conditions, @conditions = @conditions, []
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        define_method &quot;#{verb} #{path}&quot;, &amp;block
</code></li>
                
                <li class="pre-context-line"><code>        unbound_method = instance_method(&quot;#{verb} #{path}&quot;)
</code></li>
                
                <li class="pre-context-line"><code>        block =
</code></li>
                
                <li class="pre-context-line"><code>          if block.arity != 0
</code></li>
                
              </ol>
              

              <ol start="863" class="context" id="9"
                  onclick="toggle(9);">
                <li class="context-line" id="context-9"><code>            proc { unbound_method.bind(self).call(*@block_params) }</code></li>
              </ol>

              
              <ol start="864" class="post-context"
                  id="post-9" onclick="toggle(9);">
                
                <li class="post-context-line"><code>          else
</code></li>
                
                <li class="post-context-line"><code>            proc { unbound_method.bind(self).call }
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        invoke_hook(:route_added, verb, path, block)
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        (@routes[verb] ||= []).
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>route</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="856"
                  class="pre-context" id="pre-10"
                  onclick="toggle(10);">
                
                <li class="pre-context-line"><code>        pattern, keys = compile(path)
</code></li>
                
                <li class="pre-context-line"><code>        conditions, @conditions = @conditions, []
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        define_method &quot;#{verb} #{path}&quot;, &amp;block
</code></li>
                
                <li class="pre-context-line"><code>        unbound_method = instance_method(&quot;#{verb} #{path}&quot;)
</code></li>
                
                <li class="pre-context-line"><code>        block =
</code></li>
                
                <li class="pre-context-line"><code>          if block.arity != 0
</code></li>
                
              </ol>
              

              <ol start="863" class="context" id="10"
                  onclick="toggle(10);">
                <li class="context-line" id="context-10"><code>            proc { unbound_method.bind(self).call(*@block_params) }</code></li>
              </ol>

              
              <ol start="864" class="post-context"
                  id="post-10" onclick="toggle(10);">
                
                <li class="post-context-line"><code>          else
</code></li>
                
                <li class="post-context-line"><code>            proc { unbound_method.bind(self).call }
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        invoke_hook(:route_added, verb, path, block)
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        (@routes[verb] ||= []).
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>instance_eval</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="514"
                  class="pre-context" id="pre-11"
                  onclick="toggle(11);">
                
                <li class="pre-context-line"><code>      route_eval(&amp;pass_block) if pass_block
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      route_missing
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run a route block and throw :halt with the result.
</code></li>
                
                <li class="pre-context-line"><code>    def route_eval(&amp;block)
</code></li>
                
              </ol>
              

              <ol start="521" class="context" id="11"
                  onclick="toggle(11);">
                <li class="context-line" id="context-11"><code>      throw :halt, instance_eval(&amp;block)</code></li>
              </ol>

              
              <ol start="522" class="post-context"
                  id="post-11" onclick="toggle(11);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # No matching route was found or all routes passed. The default
</code></li>
                
                <li class="post-context-line"><code>    # implementation is to forward the request downstream when running
</code></li>
                
                <li class="post-context-line"><code>    # as middleware (@app is non-nil); when no downstream app is set, raise
</code></li>
                
                <li class="post-context-line"><code>    # a NotFound exception. Subclasses can override this method to perform
</code></li>
                
                <li class="post-context-line"><code>    # custom route miss logic.
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>route_eval</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="514"
                  class="pre-context" id="pre-12"
                  onclick="toggle(12);">
                
                <li class="pre-context-line"><code>      route_eval(&amp;pass_block) if pass_block
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      route_missing
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run a route block and throw :halt with the result.
</code></li>
                
                <li class="pre-context-line"><code>    def route_eval(&amp;block)
</code></li>
                
              </ol>
              

              <ol start="521" class="context" id="12"
                  onclick="toggle(12);">
                <li class="context-line" id="context-12"><code>      throw :halt, instance_eval(&amp;block)</code></li>
              </ol>

              
              <ol start="522" class="post-context"
                  id="post-12" onclick="toggle(12);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # No matching route was found or all routes passed. The default
</code></li>
                
                <li class="post-context-line"><code>    # implementation is to forward the request downstream when running
</code></li>
                
                <li class="post-context-line"><code>    # as middleware (@app is non-nil); when no downstream app is set, raise
</code></li>
                
                <li class="post-context-line"><code>    # a NotFound exception. Subclasses can override this method to perform
</code></li>
                
                <li class="post-context-line"><code>    # custom route miss logic.
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="493"
                  class="pre-context" id="pre-13"
                  onclick="toggle(13);">
                
                <li class="pre-context-line"><code>              end
</code></li>
                
                <li class="pre-context-line"><code>            @params = original_params.merge(params)
</code></li>
                
                <li class="pre-context-line"><code>            @block_params = values
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>            pass_block = catch(:pass) do
</code></li>
                
                <li class="pre-context-line"><code>              conditions.each { |cond|
</code></li>
                
                <li class="pre-context-line"><code>                throw :pass if instance_eval(&amp;cond) == false }
</code></li>
                
              </ol>
              

              <ol start="500" class="context" id="13"
                  onclick="toggle(13);">
                <li class="context-line" id="context-13"><code>              route_eval(&amp;block)</code></li>
              </ol>

              
              <ol start="501" class="post-context"
                  id="post-13" onclick="toggle(13);">
                
                <li class="post-context-line"><code>            end
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        @params = original_params
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="490"
                  class="pre-context" id="pre-14"
                  onclick="toggle(14);">
                
                <li class="pre-context-line"><code>                {&#39;captures&#39; =&gt; values}
</code></li>
                
                <li class="pre-context-line"><code>              else
</code></li>
                
                <li class="pre-context-line"><code>                {}
</code></li>
                
                <li class="pre-context-line"><code>              end
</code></li>
                
                <li class="pre-context-line"><code>            @params = original_params.merge(params)
</code></li>
                
                <li class="pre-context-line"><code>            @block_params = values
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="497" class="context" id="14"
                  onclick="toggle(14);">
                <li class="context-line" id="context-14"><code>            pass_block = catch(:pass) do</code></li>
              </ol>

              
              <ol start="498" class="post-context"
                  id="post-14" onclick="toggle(14);">
                
                <li class="post-context-line"><code>              conditions.each { |cond|
</code></li>
                
                <li class="post-context-line"><code>                throw :pass if instance_eval(&amp;cond) == false }
</code></li>
                
                <li class="post-context-line"><code>              route_eval(&amp;block)
</code></li>
                
                <li class="post-context-line"><code>            end
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="490"
                  class="pre-context" id="pre-15"
                  onclick="toggle(15);">
                
                <li class="pre-context-line"><code>                {&#39;captures&#39; =&gt; values}
</code></li>
                
                <li class="pre-context-line"><code>              else
</code></li>
                
                <li class="pre-context-line"><code>                {}
</code></li>
                
                <li class="pre-context-line"><code>              end
</code></li>
                
                <li class="pre-context-line"><code>            @params = original_params.merge(params)
</code></li>
                
                <li class="pre-context-line"><code>            @block_params = values
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="497" class="context" id="15"
                  onclick="toggle(15);">
                <li class="context-line" id="context-15"><code>            pass_block = catch(:pass) do</code></li>
              </ol>

              
              <ol start="498" class="post-context"
                  id="post-15" onclick="toggle(15);">
                
                <li class="post-context-line"><code>              conditions.each { |cond|
</code></li>
                
                <li class="post-context-line"><code>                throw :pass if instance_eval(&amp;cond) == false }
</code></li>
                
                <li class="post-context-line"><code>              route_eval(&amp;block)
</code></li>
                
                <li class="post-context-line"><code>            end
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>each</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="469"
                  class="pre-context" id="pre-16"
                  onclick="toggle(16);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base=self.class, pass_block=nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        original_params = @params
</code></li>
                
                <li class="pre-context-line"><code>        path            = unescape(@request.path_info)
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="476" class="context" id="16"
                  onclick="toggle(16);">
                <li class="context-line" id="context-16"><code>        routes.each do |pattern, keys, conditions, block|</code></li>
              </ol>

              
              <ol start="477" class="post-context"
                  id="post-16" onclick="toggle(16);">
                
                <li class="post-context-line"><code>          if match = pattern.match(path)
</code></li>
                
                <li class="post-context-line"><code>            values = match.captures.to_a
</code></li>
                
                <li class="post-context-line"><code>            params =
</code></li>
                
                <li class="post-context-line"><code>              if keys.any?
</code></li>
                
                <li class="post-context-line"><code>                keys.zip(values).inject({}) do |hash,(k,v)|
</code></li>
                
                <li class="post-context-line"><code>                  if k == &#39;splat&#39;
</code></li>
                
                <li class="post-context-line"><code>                    (hash[k] ||= []) &lt;&lt; v
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="469"
                  class="pre-context" id="pre-17"
                  onclick="toggle(17);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base=self.class, pass_block=nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        original_params = @params
</code></li>
                
                <li class="pre-context-line"><code>        path            = unescape(@request.path_info)
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="476" class="context" id="17"
                  onclick="toggle(17);">
                <li class="context-line" id="context-17"><code>        routes.each do |pattern, keys, conditions, block|</code></li>
              </ol>

              
              <ol start="477" class="post-context"
                  id="post-17" onclick="toggle(17);">
                
                <li class="post-context-line"><code>          if match = pattern.match(path)
</code></li>
                
                <li class="post-context-line"><code>            values = match.captures.to_a
</code></li>
                
                <li class="post-context-line"><code>            params =
</code></li>
                
                <li class="post-context-line"><code>              if keys.any?
</code></li>
                
                <li class="post-context-line"><code>                keys.zip(values).inject({}) do |hash,(k,v)|
</code></li>
                
                <li class="post-context-line"><code>                  if k == &#39;splat&#39;
</code></li>
                
                <li class="post-context-line"><code>                    (hash[k] ||= []) &lt;&lt; v
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>dispatch!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="594"
                  class="pre-context" id="pre-18"
                  onclick="toggle(18);">
                
                <li class="pre-context-line"><code>      res
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Dispatch a request with error handling.
</code></li>
                
                <li class="pre-context-line"><code>    def dispatch!
</code></li>
                
                <li class="pre-context-line"><code>      static! if settings.static? &amp;&amp; (request.get? || request.head?)
</code></li>
                
                <li class="pre-context-line"><code>      before_filter!
</code></li>
                
              </ol>
              

              <ol start="601" class="context" id="18"
                  onclick="toggle(18);">
                <li class="context-line" id="context-18"><code>      route!</code></li>
              </ol>

              
              <ol start="602" class="post-context"
                  id="post-18" onclick="toggle(18);">
                
                <li class="post-context-line"><code>    rescue NotFound =&gt; boom
</code></li>
                
                <li class="post-context-line"><code>      handle_not_found!(boom)
</code></li>
                
                <li class="post-context-line"><code>    rescue ::Exception =&gt; boom
</code></li>
                
                <li class="post-context-line"><code>      handle_exception!(boom)
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      after_filter! unless env[&#39;sinatra.static_file&#39;]
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>call!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="404"
                  class="pre-context" id="pre-19"
                  onclick="toggle(19);">
                
                <li class="pre-context-line"><code>    def call!(env)
</code></li>
                
                <li class="pre-context-line"><code>      @env      = env
</code></li>
                
                <li class="pre-context-line"><code>      @request  = Request.new(env)
</code></li>
                
                <li class="pre-context-line"><code>      @response = Response.new
</code></li>
                
                <li class="pre-context-line"><code>      @params   = indifferent_params(@request.params)
</code></li>
                
                <li class="pre-context-line"><code>      @template_cache.clear if settings.reload_templates
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="411" class="context" id="19"
                  onclick="toggle(19);">
                <li class="context-line" id="context-19"><code>      invoke { dispatch! }</code></li>
              </ol>

              
              <ol start="412" class="post-context"
                  id="post-19" onclick="toggle(19);">
                
                <li class="post-context-line"><code>      invoke { error_block!(response.status) }
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      status, header, body = @response.finish
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Never produce a body on HEAD requests. Do retain the Content-Length
</code></li>
                
                <li class="post-context-line"><code>      # unless it&#39;s &quot;0&quot;, in which case we assume it was calculated erroneously
</code></li>
                
                <li class="post-context-line"><code>      # for a manual HEAD response and remove it entirely.
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>instance_eval</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="559"
                  class="pre-context" id="pre-20"
                  onclick="toggle(20);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#39;throw :halt&#39; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke(&amp;block)
</code></li>
                
              </ol>
              

              <ol start="566" class="context" id="20"
                  onclick="toggle(20);">
                <li class="context-line" id="context-20"><code>      res = catch(:halt) { instance_eval(&amp;block) }</code></li>
              </ol>

              
              <ol start="567" class="post-context"
                  id="post-20" onclick="toggle(20);">
                
                <li class="post-context-line"><code>      return if res.nil?
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      case
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_str)
</code></li>
                
                <li class="post-context-line"><code>        @response.body = [res]
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_ary)
</code></li>
                
                <li class="post-context-line"><code>        res = res.to_ary
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="559"
                  class="pre-context" id="pre-21"
                  onclick="toggle(21);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#39;throw :halt&#39; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke(&amp;block)
</code></li>
                
              </ol>
              

              <ol start="566" class="context" id="21"
                  onclick="toggle(21);">
                <li class="context-line" id="context-21"><code>      res = catch(:halt) { instance_eval(&amp;block) }</code></li>
              </ol>

              
              <ol start="567" class="post-context"
                  id="post-21" onclick="toggle(21);">
                
                <li class="post-context-line"><code>      return if res.nil?
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      case
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_str)
</code></li>
                
                <li class="post-context-line"><code>        @response.body = [res]
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_ary)
</code></li>
                
                <li class="post-context-line"><code>        res = res.to_ary
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="559"
                  class="pre-context" id="pre-22"
                  onclick="toggle(22);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#39;throw :halt&#39; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke(&amp;block)
</code></li>
                
              </ol>
              

              <ol start="566" class="context" id="22"
                  onclick="toggle(22);">
                <li class="context-line" id="context-22"><code>      res = catch(:halt) { instance_eval(&amp;block) }</code></li>
              </ol>

              
              <ol start="567" class="post-context"
                  id="post-22" onclick="toggle(22);">
                
                <li class="post-context-line"><code>      return if res.nil?
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      case
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_str)
</code></li>
                
                <li class="post-context-line"><code>        @response.body = [res]
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_ary)
</code></li>
                
                <li class="post-context-line"><code>        res = res.to_ary
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="559"
                  class="pre-context" id="pre-23"
                  onclick="toggle(23);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#39;throw :halt&#39; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke(&amp;block)
</code></li>
                
              </ol>
              

              <ol start="566" class="context" id="23"
                  onclick="toggle(23);">
                <li class="context-line" id="context-23"><code>      res = catch(:halt) { instance_eval(&amp;block) }</code></li>
              </ol>

              
              <ol start="567" class="post-context"
                  id="post-23" onclick="toggle(23);">
                
                <li class="post-context-line"><code>      return if res.nil?
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      case
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_str)
</code></li>
                
                <li class="post-context-line"><code>        @response.body = [res]
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_ary)
</code></li>
                
                <li class="post-context-line"><code>        res = res.to_ary
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>call!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="404"
                  class="pre-context" id="pre-24"
                  onclick="toggle(24);">
                
                <li class="pre-context-line"><code>    def call!(env)
</code></li>
                
                <li class="pre-context-line"><code>      @env      = env
</code></li>
                
                <li class="pre-context-line"><code>      @request  = Request.new(env)
</code></li>
                
                <li class="pre-context-line"><code>      @response = Response.new
</code></li>
                
                <li class="pre-context-line"><code>      @params   = indifferent_params(@request.params)
</code></li>
                
                <li class="pre-context-line"><code>      @template_cache.clear if settings.reload_templates
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="411" class="context" id="24"
                  onclick="toggle(24);">
                <li class="context-line" id="context-24"><code>      invoke { dispatch! }</code></li>
              </ol>

              
              <ol start="412" class="post-context"
                  id="post-24" onclick="toggle(24);">
                
                <li class="post-context-line"><code>      invoke { error_block!(response.status) }
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      status, header, body = @response.finish
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Never produce a body on HEAD requests. Do retain the Content-Length
</code></li>
                
                <li class="post-context-line"><code>      # unless it&#39;s &quot;0&quot;, in which case we assume it was calculated erroneously
</code></li>
                
                <li class="post-context-line"><code>      # for a manual HEAD response and remove it entirely.
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="392"
                  class="pre-context" id="pre-25"
                  onclick="toggle(25);">
                
                <li class="pre-context-line"><code>      @app = app
</code></li>
                
                <li class="pre-context-line"><code>      @template_cache = Tilt::Cache.new
</code></li>
                
                <li class="pre-context-line"><code>      yield self if block_given?
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Rack call interface.
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="399" class="context" id="25"
                  onclick="toggle(25);">
                <li class="context-line" id="context-25"><code>      dup.call!(env)</code></li>
              </ol>

              
              <ol start="400" class="post-context"
                  id="post-25" onclick="toggle(25);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    attr_accessor :env, :request, :response, :params
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def call!(env)
</code></li>
                
                <li class="post-context-line"><code>      @env      = env
</code></li>
                
                <li class="post-context-line"><code>      @request  = Request.new(env)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/rack-1.1.0/lib/rack/showexceptions.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="17"
                  class="pre-context" id="pre-26"
                  onclick="toggle(26);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def initialize(app)
</code></li>
                
                <li class="pre-context-line"><code>      @app = app
</code></li>
                
                <li class="pre-context-line"><code>      @template = ERB.new(TEMPLATE)
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="24" class="context" id="26"
                  onclick="toggle(26);">
                <li class="context-line" id="context-26"><code>      @app.call(env)</code></li>
              </ol>

              
              <ol start="25" class="post-context"
                  id="post-26" onclick="toggle(26);">
                
                <li class="post-context-line"><code>    rescue StandardError, LoadError, SyntaxError =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      backtrace = pretty(env, e)
</code></li>
                
                <li class="post-context-line"><code>      [500,
</code></li>
                
                <li class="post-context-line"><code>       {&quot;Content-Type&quot; =&gt; &quot;text/html&quot;,
</code></li>
                
                <li class="post-context-line"><code>        &quot;Content-Length&quot; =&gt; backtrace.join.size.to_s},
</code></li>
                
                <li class="post-context-line"><code>       backtrace]
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="972"
                  class="pre-context" id="pre-27"
                  onclick="toggle(27);">
                
                <li class="pre-context-line"><code>        middleware.each { |c,a,b| builder.use(c, *a, &amp;b) }
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        builder.run super
</code></li>
                
                <li class="pre-context-line"><code>        builder.to_app
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="979" class="context" id="27"
                  onclick="toggle(27);">
                <li class="context-line" id="context-27"><code>        synchronize { prototype.call(env) }</code></li>
              </ol>

              
              <ol start="980" class="post-context"
                  id="post-27" onclick="toggle(27);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    private
</code></li>
                
                <li class="post-context-line"><code>      def detect_rack_handler
</code></li>
                
                <li class="post-context-line"><code>        servers = Array(self.server)
</code></li>
                
                <li class="post-context-line"><code>        servers.each do |server_name|
</code></li>
                
                <li class="post-context-line"><code>          begin
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>synchronize</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="998"
                  class="pre-context" id="pre-28"
                  onclick="toggle(28);">
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      @@mutex = Mutex.new
</code></li>
                
                <li class="pre-context-line"><code>      def synchronize(&amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        if lock?
</code></li>
                
                <li class="pre-context-line"><code>          @@mutex.synchronize(&amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        else
</code></li>
                
              </ol>
              

              <ol start="1005" class="context" id="28"
                  onclick="toggle(28);">
                <li class="context-line" id="context-28"><code>          yield</code></li>
              </ol>

              
              <ol start="1006" class="post-context"
                  id="post-28" onclick="toggle(28);">
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def metadef(message, &amp;block)
</code></li>
                
                <li class="post-context-line"><code>        (class &lt;&lt; self; self; end).
</code></li>
                
                <li class="post-context-line"><code>          send :define_method, message, &amp;block
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/sinatra-1.0/lib/sinatra/base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="972"
                  class="pre-context" id="pre-29"
                  onclick="toggle(29);">
                
                <li class="pre-context-line"><code>        middleware.each { |c,a,b| builder.use(c, *a, &amp;b) }
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        builder.run super
</code></li>
                
                <li class="pre-context-line"><code>        builder.to_app
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="979" class="context" id="29"
                  onclick="toggle(29);">
                <li class="context-line" id="context-29"><code>        synchronize { prototype.call(env) }</code></li>
              </ol>

              
              <ol start="980" class="post-context"
                  id="post-29" onclick="toggle(29);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    private
</code></li>
                
                <li class="post-context-line"><code>      def detect_rack_handler
</code></li>
                
                <li class="post-context-line"><code>        servers = Array(self.server)
</code></li>
                
                <li class="post-context-line"><code>        servers.each do |server_name|
</code></li>
                
                <li class="post-context-line"><code>          begin
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/rack-1.1.0/lib/rack/mock.rb</code> in
                <code><strong>request</strong></code>
            </li>

            <li class="code system">
              
              <ol start="63"
                  class="pre-context" id="pre-30"
                  onclick="toggle(30);">
                
                <li class="pre-context-line"><code>      if opts[:lint]
</code></li>
                
                <li class="pre-context-line"><code>        app = Rack::Lint.new(@app)
</code></li>
                
                <li class="pre-context-line"><code>      else
</code></li>
                
                <li class="pre-context-line"><code>        app = @app
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      errors = env[&quot;rack.errors&quot;]
</code></li>
                
              </ol>
              

              <ol start="70" class="context" id="30"
                  onclick="toggle(30);">
                <li class="context-line" id="context-30"><code>      MockResponse.new(*(app.call(env) + [errors]))</code></li>
              </ol>

              
              <ol start="71" class="post-context"
                  id="post-30" onclick="toggle(30);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # Return the Rack environment used for a request to +uri+.
</code></li>
                
                <li class="post-context-line"><code>    def self.env_for(uri=&quot;&quot;, opts={})
</code></li>
                
                <li class="post-context-line"><code>      uri = URI(uri)
</code></li>
                
                <li class="post-context-line"><code>      uri.path = &quot;/#{uri.path}&quot; unless uri.path[0] == ?/
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info app">
              <code>/Users/matt/Workspace/aerial/bin/../lib/aerial/build.rb</code> in
                <code><strong>nil</strong></code>
            </li>

            <li class="code app">
              
              <ol start="71"
                  class="pre-context" id="pre-31"
                  onclick="toggle(31);">
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    desc &quot;build_feed_xml&quot;, &quot;Build the feed rss xml&quot;
</code></li>
                
                <li class="pre-context-line"><code>    def build_feed_xml
</code></li>
                
                <li class="pre-context-line"><code>      create_file &quot;#{@site_path}/feed.xml&quot; do
</code></li>
                
              </ol>
              

              <ol start="78" class="context" id="31"
                  onclick="toggle(31);">
                <li class="context-line" id="context-31"><code>        @request.request(&#39;get&#39;, &quot;/feed.xml&quot;).body</code></li>
              </ol>

              
              <ol start="79" class="post-context"
                  id="post-31" onclick="toggle(31);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/thor-0.13.8/lib/thor/actions/create_file.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="47"
                  class="pre-context" id="pre-32"
                  onclick="toggle(32);">
                
                <li class="pre-context-line"><code>        exists? &amp;&amp; File.binread(destination) == render
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # Holds the content to be added to the file.
</code></li>
                
                <li class="pre-context-line"><code>      #
</code></li>
                
                <li class="pre-context-line"><code>      def render
</code></li>
                
                <li class="pre-context-line"><code>        @render ||= if data.is_a?(Proc)
</code></li>
                
              </ol>
              

              <ol start="54" class="context" id="32"
                  onclick="toggle(32);">
                <li class="context-line" id="context-32"><code>          data.call</code></li>
              </ol>

              
              <ol start="55" class="post-context"
                  id="post-32" onclick="toggle(32);">
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          data
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def invoke!
</code></li>
                
                <li class="post-context-line"><code>        invoke_with_conflict_check do
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/thor-0.13.8/lib/thor/actions/create_file.rb</code> in
                <code><strong>render</strong></code>
            </li>

            <li class="code system">
              
              <ol start="47"
                  class="pre-context" id="pre-33"
                  onclick="toggle(33);">
                
                <li class="pre-context-line"><code>        exists? &amp;&amp; File.binread(destination) == render
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # Holds the content to be added to the file.
</code></li>
                
                <li class="pre-context-line"><code>      #
</code></li>
                
                <li class="pre-context-line"><code>      def render
</code></li>
                
                <li class="pre-context-line"><code>        @render ||= if data.is_a?(Proc)
</code></li>
                
              </ol>
              

              <ol start="54" class="context" id="33"
                  onclick="toggle(33);">
                <li class="context-line" id="context-33"><code>          data.call</code></li>
              </ol>

              
              <ol start="55" class="post-context"
                  id="post-33" onclick="toggle(33);">
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          data
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def invoke!
</code></li>
                
                <li class="post-context-line"><code>        invoke_with_conflict_check do
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/thor-0.13.8/lib/thor/actions/create_file.rb</code> in
                <code><strong>identical?</strong></code>
            </li>

            <li class="code system">
              
              <ol start="40"
                  class="pre-context" id="pre-34"
                  onclick="toggle(34);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # Checks if the content of the file at the destination is identical to the rendered result.
</code></li>
                
                <li class="pre-context-line"><code>      #
</code></li>
                
                <li class="pre-context-line"><code>      # ==== Returns
</code></li>
                
                <li class="pre-context-line"><code>      # Boolean:: true if it is identical, false otherwise.
</code></li>
                
                <li class="pre-context-line"><code>      #
</code></li>
                
                <li class="pre-context-line"><code>      def identical?
</code></li>
                
              </ol>
              

              <ol start="47" class="context" id="34"
                  onclick="toggle(34);">
                <li class="context-line" id="context-34"><code>        exists? &amp;&amp; File.binread(destination) == render</code></li>
              </ol>

              
              <ol start="48" class="post-context"
                  id="post-34" onclick="toggle(34);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Holds the content to be added to the file.
</code></li>
                
                <li class="post-context-line"><code>      #
</code></li>
                
                <li class="post-context-line"><code>      def render
</code></li>
                
                <li class="post-context-line"><code>        @render ||= if data.is_a?(Proc)
</code></li>
                
                <li class="post-context-line"><code>          data.call
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/thor-0.13.8/lib/thor/actions/create_file.rb</code> in
                <code><strong>on_conflict_behavior</strong></code>
            </li>

            <li class="code system">
              
              <ol start="66"
                  class="pre-context" id="pre-35"
                  onclick="toggle(35);">
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      protected
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        # Now on conflict we check if the file is identical or not.
</code></li>
                
                <li class="pre-context-line"><code>        #
</code></li>
                
                <li class="pre-context-line"><code>        def on_conflict_behavior(&amp;block)
</code></li>
                
              </ol>
              

              <ol start="73" class="context" id="35"
                  onclick="toggle(35);">
                <li class="context-line" id="context-35"><code>          if identical?</code></li>
              </ol>

              
              <ol start="74" class="post-context"
                  id="post-35" onclick="toggle(35);">
                
                <li class="post-context-line"><code>            say_status :identical, :blue
</code></li>
                
                <li class="post-context-line"><code>          else
</code></li>
                
                <li class="post-context-line"><code>            options = base.options.merge(config)
</code></li>
                
                <li class="post-context-line"><code>            force_or_skip_or_conflict(options[:force], options[:skip], &amp;block)
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/thor-0.13.8/lib/thor/actions/empty_directory.rb</code> in
                <code><strong>invoke_with_conflict_check</strong></code>
            </li>

            <li class="code system">
              
              <ol start="104"
                  class="pre-context" id="pre-36"
                  onclick="toggle(36);">
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        # Receives a hash of options and just execute the block if some
</code></li>
                
                <li class="pre-context-line"><code>        # conditions are met.
</code></li>
                
                <li class="pre-context-line"><code>        #
</code></li>
                
                <li class="pre-context-line"><code>        def invoke_with_conflict_check(&amp;block)
</code></li>
                
                <li class="pre-context-line"><code>          if exists?
</code></li>
                
              </ol>
              

              <ol start="111" class="context" id="36"
                  onclick="toggle(36);">
                <li class="context-line" id="context-36"><code>            on_conflict_behavior(&amp;block)</code></li>
              </ol>

              
              <ol start="112" class="post-context"
                  id="post-36" onclick="toggle(36);">
                
                <li class="post-context-line"><code>          else
</code></li>
                
                <li class="post-context-line"><code>            say_status :create, :green
</code></li>
                
                <li class="post-context-line"><code>            block.call unless pretend?
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          destination
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/thor-0.13.8/lib/thor/actions/create_file.rb</code> in
                <code><strong>invoke!</strong></code>
            </li>

            <li class="code system">
              
              <ol start="54"
                  class="pre-context" id="pre-37"
                  onclick="toggle(37);">
                
                <li class="pre-context-line"><code>          data.call
</code></li>
                
                <li class="pre-context-line"><code>        else
</code></li>
                
                <li class="pre-context-line"><code>          data
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def invoke!
</code></li>
                
              </ol>
              

              <ol start="61" class="context" id="37"
                  onclick="toggle(37);">
                <li class="context-line" id="context-37"><code>        invoke_with_conflict_check do</code></li>
              </ol>

              
              <ol start="62" class="post-context"
                  id="post-37" onclick="toggle(37);">
                
                <li class="post-context-line"><code>          FileUtils.mkdir_p(File.dirname(destination))
</code></li>
                
                <li class="post-context-line"><code>          File.open(destination, &#39;wb&#39;) { |f| f.write render }
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>        given_destination
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      protected
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/thor-0.13.8/lib/thor/actions.rb</code> in
                <code><strong>action</strong></code>
            </li>

            <li class="code system">
              
              <ol start="86"
                  class="pre-context" id="pre-38"
                  onclick="toggle(38);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Wraps an action object and call it accordingly to the thor class behavior.
</code></li>
                
                <li class="pre-context-line"><code>    #
</code></li>
                
                <li class="pre-context-line"><code>    def action(instance) #:nodoc:
</code></li>
                
                <li class="pre-context-line"><code>      if behavior == :revoke
</code></li>
                
                <li class="pre-context-line"><code>        instance.revoke!
</code></li>
                
                <li class="pre-context-line"><code>      else
</code></li>
                
              </ol>
              

              <ol start="93" class="context" id="38"
                  onclick="toggle(38);">
                <li class="context-line" id="context-38"><code>        instance.invoke!</code></li>
              </ol>

              
              <ol start="94" class="post-context"
                  id="post-38" onclick="toggle(38);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # Returns the root for this thor class (also aliased as destination root).
</code></li>
                
                <li class="post-context-line"><code>    #
</code></li>
                
                <li class="post-context-line"><code>    def destination_root
</code></li>
                
                <li class="post-context-line"><code>      @destination_stack.last
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/thor-0.13.8/lib/thor/actions/create_file.rb</code> in
                <code><strong>create_file</strong></code>
            </li>

            <li class="code system">
              
              <ol start="19"
                  class="pre-context" id="pre-39"
                  onclick="toggle(39);">
                
                <li class="pre-context-line"><code>    #   end
</code></li>
                
                <li class="pre-context-line"><code>    #
</code></li>
                
                <li class="pre-context-line"><code>    #   create_file &quot;config/apach.conf&quot;, &quot;your apache config&quot;
</code></li>
                
                <li class="pre-context-line"><code>    #
</code></li>
                
                <li class="pre-context-line"><code>    def create_file(destination, *args, &amp;block)
</code></li>
                
                <li class="pre-context-line"><code>      config = args.last.is_a?(Hash) ? args.pop : {}
</code></li>
                
                <li class="pre-context-line"><code>      data = args.first
</code></li>
                
              </ol>
              

              <ol start="26" class="context" id="39"
                  onclick="toggle(39);">
                <li class="context-line" id="context-39"><code>      action CreateFile.new(self, destination, block || data.to_s, config)</code></li>
              </ol>

              
              <ol start="27" class="post-context"
                  id="post-39" onclick="toggle(39);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>    alias :add_file :create_file
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # AddFile is a subset of Template, which instead of rendering a file with
</code></li>
                
                <li class="post-context-line"><code>    # ERB, it gets the content from the user.
</code></li>
                
                <li class="post-context-line"><code>    #
</code></li>
                
                <li class="post-context-line"><code>    class CreateFile &lt; EmptyDirectory #:nodoc:
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info app">
              <code>/Users/matt/Workspace/aerial/bin/../lib/aerial/build.rb</code> in
                <code><strong>build_feed_xml</strong></code>
            </li>

            <li class="code app">
              
              <ol start="70"
                  class="pre-context" id="pre-40"
                  onclick="toggle(40);">
                
                <li class="pre-context-line"><code>          @request.request(&#39;get&#39;, &quot;/archives/#{archive.first.first}&quot;).body
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    desc &quot;build_feed_xml&quot;, &quot;Build the feed rss xml&quot;
</code></li>
                
                <li class="pre-context-line"><code>    def build_feed_xml
</code></li>
                
              </ol>
              

              <ol start="77" class="context" id="40"
                  onclick="toggle(40);">
                <li class="context-line" id="context-40"><code>      create_file &quot;#{@site_path}/feed.xml&quot; do</code></li>
              </ol>

              
              <ol start="78" class="post-context"
                  id="post-40" onclick="toggle(40);">
                
                <li class="post-context-line"><code>        @request.request(&#39;get&#39;, &quot;/feed.xml&quot;).body
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info app">
              <code>/Users/matt/Workspace/aerial/bin/../lib/aerial/build.rb</code> in
                <code><strong>build</strong></code>
            </li>

            <li class="code app">
              
              <ol start="19"
                  class="pre-context" id="pre-41"
                  onclick="toggle(41);">
                
                <li class="pre-context-line"><code>      @articles = Aerial::Article.all
</code></li>
                
                <li class="pre-context-line"><code>      @request = Rack::MockRequest.new(Aerial::App)
</code></li>
                
                <li class="pre-context-line"><code>      build_style_css
</code></li>
                
                <li class="pre-context-line"><code>      build_pages_html
</code></li>
                
                <li class="pre-context-line"><code>      build_articles_html
</code></li>
                
                <li class="pre-context-line"><code>      build_tags_html
</code></li>
                
                <li class="pre-context-line"><code>      build_archives_html
</code></li>
                
              </ol>
              

              <ol start="26" class="context" id="41"
                  onclick="toggle(41);">
                <li class="context-line" id="context-41"><code>      build_feed_xml</code></li>
              </ol>

              
              <ol start="27" class="post-context"
                  id="post-41" onclick="toggle(41);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    desc &quot;build_style_css&quot;, &quot;Build all css files.&quot;
</code></li>
                
                <li class="post-context-line"><code>    def build_style_css
</code></li>
                
                <li class="post-context-line"><code>      create_file &quot;#{@site_path}/style.css&quot; do
</code></li>
                
                <li class="post-context-line"><code>        @request.request(&#39;get&#39;, &#39;/style.css&#39;).body
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/thor-0.13.8/lib/thor/task.rb</code> in
                <code><strong>send</strong></code>
            </li>

            <li class="code system">
              
              <ol start="15"
                  class="pre-context" id="pre-42"
                  onclick="toggle(42);">
                
                <li class="pre-context-line"><code>      false
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # By default, a task invokes a method in the thor class. You can change this
</code></li>
                
                <li class="pre-context-line"><code>    # implementation to create custom tasks.
</code></li>
                
                <li class="pre-context-line"><code>    def run(instance, args=[])
</code></li>
                
                <li class="pre-context-line"><code>      public_method?(instance) ?
</code></li>
                
              </ol>
              

              <ol start="22" class="context" id="42"
                  onclick="toggle(42);">
                <li class="context-line" id="context-42"><code>        instance.send(name, *args) : instance.class.handle_no_task_error(name)</code></li>
              </ol>

              
              <ol start="23" class="post-context"
                  id="post-42" onclick="toggle(42);">
                
                <li class="post-context-line"><code>    rescue ArgumentError =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      handle_argument_error?(instance, e, caller) ?
</code></li>
                
                <li class="post-context-line"><code>        instance.class.handle_argument_error(self, e) : (raise e)
</code></li>
                
                <li class="post-context-line"><code>    rescue NoMethodError =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      handle_no_method_error?(instance, e, caller) ?
</code></li>
                
                <li class="post-context-line"><code>        instance.class.handle_no_task_error(name) : (raise e)
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/thor-0.13.8/lib/thor/task.rb</code> in
                <code><strong>run</strong></code>
            </li>

            <li class="code system">
              
              <ol start="15"
                  class="pre-context" id="pre-43"
                  onclick="toggle(43);">
                
                <li class="pre-context-line"><code>      false
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # By default, a task invokes a method in the thor class. You can change this
</code></li>
                
                <li class="pre-context-line"><code>    # implementation to create custom tasks.
</code></li>
                
                <li class="pre-context-line"><code>    def run(instance, args=[])
</code></li>
                
                <li class="pre-context-line"><code>      public_method?(instance) ?
</code></li>
                
              </ol>
              

              <ol start="22" class="context" id="43"
                  onclick="toggle(43);">
                <li class="context-line" id="context-43"><code>        instance.send(name, *args) : instance.class.handle_no_task_error(name)</code></li>
              </ol>

              
              <ol start="23" class="post-context"
                  id="post-43" onclick="toggle(43);">
                
                <li class="post-context-line"><code>    rescue ArgumentError =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      handle_argument_error?(instance, e, caller) ?
</code></li>
                
                <li class="post-context-line"><code>        instance.class.handle_argument_error(self, e) : (raise e)
</code></li>
                
                <li class="post-context-line"><code>    rescue NoMethodError =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      handle_no_method_error?(instance, e, caller) ?
</code></li>
                
                <li class="post-context-line"><code>        instance.class.handle_no_task_error(name) : (raise e)
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/thor-0.13.8/lib/thor/invocation.rb</code> in
                <code><strong>nil</strong></code>
            </li>

            <li class="code system">
              
              <ol start="102"
                  class="pre-context" id="pre-44"
                  onclick="toggle(44);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      method_args = []
</code></li>
                
                <li class="pre-context-line"><code>      current = @_invocations[klass]
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      iterator = proc do |_, task|
</code></li>
                
                <li class="pre-context-line"><code>        unless current.include?(task.name)
</code></li>
                
                <li class="pre-context-line"><code>          current &lt;&lt; task.name
</code></li>
                
              </ol>
              

              <ol start="109" class="context" id="44"
                  onclick="toggle(44);">
                <li class="context-line" id="context-44"><code>          task.run(instance, method_args)</code></li>
              </ol>

              
              <ol start="110" class="post-context"
                  id="post-44" onclick="toggle(44);">
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      if task
</code></li>
                
                <li class="post-context-line"><code>        args ||= []
</code></li>
                
                <li class="post-context-line"><code>        method_args = args[Range.new(klass.arguments.size, -1)] || []
</code></li>
                
                <li class="post-context-line"><code>        iterator.call(nil, task)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/thor-0.13.8/lib/thor/invocation.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="109"
                  class="pre-context" id="pre-45"
                  onclick="toggle(45);">
                
                <li class="pre-context-line"><code>          task.run(instance, method_args)
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      if task
</code></li>
                
                <li class="pre-context-line"><code>        args ||= []
</code></li>
                
                <li class="pre-context-line"><code>        method_args = args[Range.new(klass.arguments.size, -1)] || []
</code></li>
                
              </ol>
              

              <ol start="116" class="context" id="45"
                  onclick="toggle(45);">
                <li class="context-line" id="context-45"><code>        iterator.call(nil, task)</code></li>
              </ol>

              
              <ol start="117" class="post-context"
                  id="post-45" onclick="toggle(45);">
                
                <li class="post-context-line"><code>      else
</code></li>
                
                <li class="post-context-line"><code>        klass.all_tasks.map(&amp;iterator)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # Invokes using shell padding.
</code></li>
                
                <li class="post-context-line"><code>    def invoke_with_padding(*args)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/thor-0.13.8/lib/thor/invocation.rb</code> in
                <code><strong>invoke</strong></code>
            </li>

            <li class="code system">
              
              <ol start="109"
                  class="pre-context" id="pre-46"
                  onclick="toggle(46);">
                
                <li class="pre-context-line"><code>          task.run(instance, method_args)
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      if task
</code></li>
                
                <li class="pre-context-line"><code>        args ||= []
</code></li>
                
                <li class="pre-context-line"><code>        method_args = args[Range.new(klass.arguments.size, -1)] || []
</code></li>
                
              </ol>
              

              <ol start="116" class="context" id="46"
                  onclick="toggle(46);">
                <li class="context-line" id="context-46"><code>        iterator.call(nil, task)</code></li>
              </ol>

              
              <ol start="117" class="post-context"
                  id="post-46" onclick="toggle(46);">
                
                <li class="post-context-line"><code>      else
</code></li>
                
                <li class="post-context-line"><code>        klass.all_tasks.map(&amp;iterator)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # Invokes using shell padding.
</code></li>
                
                <li class="post-context-line"><code>    def invoke_with_padding(*args)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/thor-0.13.8/lib/thor.rb</code> in
                <code><strong>start</strong></code>
            </li>

            <li class="code system">
              
              <ol start="154"
                  class="pre-context" id="pre-47"
                  onclick="toggle(47);">
                
                <li class="pre-context-line"><code>          config.merge!(:task_options =&gt; task.options)
</code></li>
                
                <li class="pre-context-line"><code>        else
</code></li>
                
                <li class="pre-context-line"><code>          args, opts = given_args, {}
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        task ||= Thor::DynamicTask.new(meth)
</code></li>
                
                <li class="pre-context-line"><code>        trailing = args[Range.new(arguments.size, -1)]
</code></li>
                
              </ol>
              

              <ol start="161" class="context" id="47"
                  onclick="toggle(47);">
                <li class="context-line" id="context-47"><code>        new(args, opts, config).invoke(task, trailing || [])</code></li>
              </ol>

              
              <ol start="162" class="post-context"
                  id="post-47" onclick="toggle(47);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # Prints help information for the given task.
</code></li>
                
                <li class="post-context-line"><code>    #
</code></li>
                
                <li class="post-context-line"><code>    # ==== Parameters
</code></li>
                
                <li class="post-context-line"><code>    # shell&lt;Thor::Shell&gt;
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/thor-0.13.8/lib/thor/base.rb</code> in
                <code><strong>start</strong></code>
            </li>

            <li class="code system">
              
              <ol start="372"
                  class="pre-context" id="pre-48"
                  onclick="toggle(48);">
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # Default way to start generators from the command line.
</code></li>
                
                <li class="pre-context-line"><code>      #
</code></li>
                
                <li class="pre-context-line"><code>      def start(given_args=ARGV, config={})
</code></li>
                
                <li class="pre-context-line"><code>        self.debugging = given_args.include?(&quot;--debug&quot;)
</code></li>
                
                <li class="pre-context-line"><code>        config[:shell] ||= Thor::Base.shell.new
</code></li>
                
              </ol>
              

              <ol start="379" class="context" id="48"
                  onclick="toggle(48);">
                <li class="context-line" id="context-48"><code>        yield(given_args.dup)</code></li>
              </ol>

              
              <ol start="380" class="post-context"
                  id="post-48" onclick="toggle(48);">
                
                <li class="post-context-line"><code>      rescue Thor::Error =&gt; e
</code></li>
                
                <li class="post-context-line"><code>        debugging ? (raise e) : config[:shell].error(e.message)
</code></li>
                
                <li class="post-context-line"><code>        exit(1) if exit_on_failure?
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def handle_no_task_error(task) #:nodoc:
</code></li>
                
                <li class="post-context-line"><code>        if $thor_runner
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>/Users/matt/.rvm/gems/ree-1.8.7-2010.01/gems/thor-0.13.8/lib/thor.rb</code> in
                <code><strong>start</strong></code>
            </li>

            <li class="code system">
              
              <ol start="133"
                  class="pre-context" id="pre-49"
                  onclick="toggle(49);">
                
                <li class="pre-context-line"><code>    #
</code></li>
                
                <li class="pre-context-line"><code>    #   script = MyScript.new(args, options, config)
</code></li>
                
                <li class="pre-context-line"><code>    #   script.invoke(:task, first_arg, second_arg, third_arg)
</code></li>
                
                <li class="pre-context-line"><code>    #
</code></li>
                
                <li class="pre-context-line"><code>    def start(original_args=ARGV, config={})
</code></li>
                
                <li class="pre-context-line"><code>      @@original_args = original_args
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="140" class="context" id="49"
                  onclick="toggle(49);">
                <li class="context-line" id="context-49"><code>      super do |given_args|</code></li>
              </ol>

              
              <ol start="141" class="post-context"
                  id="post-49" onclick="toggle(49);">
                
                <li class="post-context-line"><code>        meth = given_args.first.to_s
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        if !meth.empty? &amp;&amp; (map[meth] || meth !~ /^\-/)
</code></li>
                
                <li class="post-context-line"><code>          given_args.shift
</code></li>
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          meth = nil
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>/Users/matt/Workspace/aerial/bin/aerial</code> in
                <code><strong>nil</strong></code>
            </li>

            <li class="code system">
              
              <ol start="1"
                  class="pre-context" id="pre-50"
                  onclick="toggle(50);">
                
                <li class="pre-context-line"><code>#!/usr/bin/env ruby
</code></li>
                
                <li class="pre-context-line"><code>$LOAD_PATH &lt;&lt; File.join(File.dirname(__FILE__), &#39;..&#39;)
</code></li>
                
                <li class="pre-context-line"><code>require &#39;rubygems&#39;
</code></li>
                
                <li class="pre-context-line"><code>require File.dirname(__FILE__) + &quot;/../lib/aerial/installer&quot;
</code></li>
                
                <li class="pre-context-line"><code>require File.dirname(__FILE__) + &quot;/../lib/aerial/build&quot;
</code></li>
                
                <li class="pre-context-line"><code>#Aerial::Installer.start
</code></li>
                
              </ol>
              

              <ol start="7" class="context" id="50"
                  onclick="toggle(50);">
                <li class="context-line" id="context-50"><code>Aerial::Build.start</code></li>
              </ol>

              
              <ol start="8" class="post-context"
                  id="post-50" onclick="toggle(50);">
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      

      </ul>
    </div> <!-- /BACKTRACE -->

    <div id="get">
      <h3 id="get-info">GET</h3>
      
        <p class="no-data">No GET data.</p>
      
      <div class="clear"></div>
    </div> <!-- /GET -->

    <div id="post">
      <h3 id="post-info">POST</h3>
      
        <p class="no-data">No POST data.</p>
      
      <div class="clear"></div>
    </div> <!-- /POST -->

    <div id="cookies">
      <h3 id="cookie-info">COOKIES</h3>
      
        <p class="no-data">No cookie data.</p>
      
      <div class="clear"></div>
    </div> <!-- /COOKIES -->

    <div id="rack">
      <h3 id="env-info">Rack ENV</h3>
      <table class="req">
        <tr>
          <th>Variable</th>
          <th>Value</th>
        </tr>
         
         <tr>
           <td>CONTENT_LENGTH</td>
           <td class="code"><div>0</div></td>
         </tr>
         
         <tr>
           <td>HTTPS</td>
           <td class="code"><div>off</div></td>
         </tr>
         
         <tr>
           <td>PATH_INFO</td>
           <td class="code"><div>/feed.xml</div></td>
         </tr>
         
         <tr>
           <td>QUERY_STRING</td>
           <td class="code"><div></div></td>
         </tr>
         
         <tr>
           <td>REQUEST_METHOD</td>
           <td class="code"><div>GET</div></td>
         </tr>
         
         <tr>
           <td>SCRIPT_NAME</td>
           <td class="code"><div></div></td>
         </tr>
         
         <tr>
           <td>SERVER_NAME</td>
           <td class="code"><div>example.org</div></td>
         </tr>
         
         <tr>
           <td>SERVER_PORT</td>
           <td class="code"><div>80</div></td>
         </tr>
         
         <tr>
           <td>rack.errors</td>
           <td class="code"><div>#&lt;StringIO:0x102302ed0&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.input</td>
           <td class="code"><div>#&lt;StringIO:0x102302e58&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.multiprocess</td>
           <td class="code"><div>true</div></td>
         </tr>
         
         <tr>
           <td>rack.multithread</td>
           <td class="code"><div>true</div></td>
         </tr>
         
         <tr>
           <td>rack.request.query_hash</td>
           <td class="code"><div>{}</div></td>
         </tr>
         
         <tr>
           <td>rack.request.query_string</td>
           <td class="code"><div></div></td>
         </tr>
         
         <tr>
           <td>rack.run_once</td>
           <td class="code"><div>false</div></td>
         </tr>
         
         <tr>
           <td>rack.url_scheme</td>
           <td class="code"><div>http</div></td>
         </tr>
         
         <tr>
           <td>rack.version</td>
           <td class="code"><div>[1, 1]</div></td>
         </tr>
         
         <tr>
           <td>sinatra.error</td>
           <td class="code"><div>#&lt;NameError: undefined local variable or method `hostname&#39; for #&lt;Aerial::App:0x102302bd8&gt;&gt;</div></td>
         </tr>
         
      </table>
      <div class="clear"></div>
    </div> <!-- /RACK ENV -->

    <p id="explanation">You're seeing this error because you have
enabled the <code>show_exceptions</code> setting.</p>
  </div> <!-- /WRAP -->
  </body>
</html>
